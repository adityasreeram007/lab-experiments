#include<stdio.h>
int find();int p;
enum {true=1,false=0};

int f[10];
int main()
{
int alloc[10][3],max[10][3],work[1][3],stable[10],need[10][3],req[10][3];
int i,flag=0;

printf("enter the number of process\n");
scanf("%d",&p);
for (i=0;i<p;i++)
{
  printf("\nenter the allocation for process %d: ",i+1);
  scanf("%d %d %d",&alloc[i][0],&alloc[i][1],&alloc[i][2]);
 printf("\nenter the max %d: ",i+1);
scanf("%d %d %d",&max[i][0],&max[i][1],&max[i][2]);
need[i][0]=max[i][0]-alloc[i][0];
need[i][1]=max[i][1]-alloc[i][1];
need[i][2]=max[i][2]-alloc[i][2];
f[i]=false;
}printf("\nenter the work");
scanf("%d %d %d",&work[0][0],&work[0][1],&work[0][2]);
printf("\n enter the request for the processes if no request give (0 ,0 ,0)");
for(i=0;i<p:i++)
{
  printf("\nenter the request for process %d:",i+1);
  scanf("%d %d %d",&req[i][0],&req[i][1],&req[i][2]);
  if(req[i][0]<=alloc[i][0] && req[i][1]<=alloc[i][1] && req[i][2]<=alloc[i][2] && req[i][0]<=work[0][0] && req[i][1]<=work[0][1] && req[i][2]<=work[0][2] )
      {
        alloc[i][0]-=req[i][0];
        alloc[i][1]-=req[i][1];
        alloc[i][2]-=req[i][2];
        work[0][0]-=req[i][0];
          work[0][1]-=req[i][1];
            work[0][2]-=req[i][2];

      }
}
printf("Process\tAllocation\tMax\tNeed\tRequest\tWork"):
printf("\t\tABC\tABC\tABC\tABC\tABC");
for(i=0;i<p;i++)
{
  printf("p%d\t%d%d%d\t%d%d%d\t%d%d%d\t%d%d%d\t",i+1,alloc[i][0],alloc[i][0],alloc[i][0],max[i][0],max[i][0],max[i][0],need[i][0],need[i][0],need[i][0],req[i][0],req[i][0],req[i][0]);
  if(i==0)
  {
    printf("%d%d%d",work[0][0],work[0][1],work[0][2]);
  }
  printf("\n");
}

int j=find();
i=0;
int k=0;
int count=0;
//printf("\nj is %d ",j);
while(j==0)
{//printf("\nj is %d ",j);
  if(need[i][0]<=work[0][0] && need[i][1]<=work[0][1] && need[i][2]<=work[0][2])
  {

    work[0][0]=work[0][0]+alloc[0][0];
    work[0][1]=work[0][1]+alloc[0][1];
    work[0][2]=work[0][2]+alloc[0][2];
//      printf("\nnew work is %d %d %d",work[0][0],work[0][1],work[0][2]);
        f[i]=true; stable[k]=i+1;i++;
  k++;
  }
  j=find();


  count++;
  if(count>50)
  {
    flag=1;
    break;}


} if(flag==1)
    {
      printf("\nno safe states");
    }
    else{
        printf("\n");
      for (i=0;i<p;i++)
      {
        printf("P%d",stable[i]);
        if(i<p-1)
        {
                printf("->");
                }
      }
    }
        printf("\nnew work is %d %d %d\n",work[0][0],work[0][1],work[0][2]);

  return 0;

}
int find()
{int flag=0,i;
  for (i=0;i<p;i++)
  {
    if(f[i]==true)
      flag=1;
    else{
      flag=0;
      break;
    }

  }
}
