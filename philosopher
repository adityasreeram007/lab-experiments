

#include<unistd.h>
#include<stdio.h>
#include<pthread.h>
#include<semaphore.h>
#include<stdlib.h>

#define N 5
#define hungry 0
#define eating 1

int philo[N] = { 0, 1, 2, 3, 4 };
int state[5];
int mutex[5];
void clear(int i);
void* philospher()

{//this generates a random number
 int i=rand() % 5;
  //i depends on the number generated by ur pc within the limit 5
    //printf(" number %d\n",i);
  if(i!=0)
  printf("requesting philosopher %d\n",i);
  int count=0;
  while (count<50) {
  if(i>0 && i<5){
  if(mutex[i]==0 && state[i]==hungry && mutex[i+1]==0 && state[i+1]==hungry)
  {
  	state[i]=eating;
  	mutex[i]=1;
  	printf("philospher %d is eating with the fork %d and %d\n",i,i,i+1);
  	sleep(3);

  	count++;
  }
  else{
  	printf("lack of resource for philosopher %d\n",i);
  	sleep(2);
  }
  if(i==5)
  {
  	if(mutex[i]==0 && state[i]==hungry && mutex[1]==0 && state[1]==hungry)
  	{
  		state[i]=eating;
  	mutex[i]=1;
  	printf("philospher %d is eating with the fork %d and %d\n",i,i,1);
  	sleep(3);

  	count++;
	  }

  }
  clear(i);
  i=rand() % 5;
  if(i!=0)
  printf("requesting philosopher %d\n",i);
  //printf(" number %d\n",i);


    }
}

}
void clear(int i)
{

		mutex[i]=0;
		state[i]=hungry;

	}
int main()
{
  int i;
  pthread_t thread_id[50];
  	for (i=1;i<5;i++)
  		mutex[i]=0;
	for (i=1;i<5;i++)
  		state[i]=hungry;
  		//on creation of threads for philospher all will be thinking then theyll start eating
  		printf("creating threads\n");
  	for(i=0;i<5;i++){

  		printf("philosopher %d is thinking\n",i+1);
  		sleep(2);}
  for(i=0;i<5;i++)
  {

    // syntax to create a p_thread:  int pthread_create(pthread_t *thread, const pthread_attr_t *attr,void *(*start_routine) (void *), void *arg);
//http://man7.org/linux/man-pages/man3/pthread_create.3.html check here for more information
    pthread_create(&thread_id[i],NULL,philospher,&philo[i]);

    sleep(2);
  }
  for (i=0;i<5;i++)
  {
    //syntax:  int pthread_join(pthread_t thread, void **retval);
    //join will run ur threads untill the thread gets terminated
    //http://man7.org/linux/man-pages/man3/pthread_join.3.html for further info
    pthread_join(thread_id[i],NULL);
  }
}
